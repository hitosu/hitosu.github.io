(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "./pkg/wasm_tutorial.js":
/*!******************************!*\
  !*** ./pkg/wasm_tutorial.js ***!
  \******************************/
/*! exports provided: __wbg_error_cc95a3d302735ca3, __wbg_random_ae55f5b83bdab2a0, Universe, __wbindgen_throw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_error_cc95a3d302735ca3\", function() { return __wbg_error_cc95a3d302735ca3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_random_ae55f5b83bdab2a0\", function() { return __wbg_random_ae55f5b83bdab2a0; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Universe\", function() { return Universe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony import */ var _wasm_tutorial_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wasm_tutorial_bg */ \"./pkg/wasm_tutorial_bg.wasm\");\n/* tslint:disable */\n\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== _wasm_tutorial_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory = new Uint8Array(_wasm_tutorial_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = _wasm_tutorial_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_global_argument_ptr\"]();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== _wasm_tutorial_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint32Memory = new Uint32Array(_wasm_tutorial_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint32Memory;\n}\n\nfunction __wbg_error_cc95a3d302735ca3(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n\n    varg0 = varg0.slice();\n    _wasm_tutorial_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](arg0, arg1 * 1);\n\n    console.error(varg0);\n}\n\nfunction __wbg_random_ae55f5b83bdab2a0() {\n    return Math.random();\n}\n\nfunction freeUniverse(ptr) {\n\n    _wasm_tutorial_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_universe_free\"](ptr);\n}\n/**\n*/\nclass Universe {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Universe.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeUniverse(ptr);\n    }\n\n    /**\n    * @returns {Universe}\n    */\n    static new() {\n        return Universe.__wrap(_wasm_tutorial_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_new\"]());\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        return _wasm_tutorial_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_width\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    height() {\n        return _wasm_tutorial_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_height\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    cells() {\n        return _wasm_tutorial_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_cells\"](this.ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    render() {\n        const retptr = globalArgumentPtr();\n        _wasm_tutorial_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_render\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _wasm_tutorial_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @returns {void}\n    */\n    tick() {\n        return _wasm_tutorial_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_tick\"](this.ptr);\n    }\n    /**\n    * @param {number} arg0\n    * @returns {void}\n    */\n    set_width(arg0) {\n        return _wasm_tutorial_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_width\"](this.ptr, arg0);\n    }\n    /**\n    * @param {number} arg0\n    * @returns {void}\n    */\n    set_height(arg0) {\n        return _wasm_tutorial_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_height\"](this.ptr, arg0);\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @returns {void}\n    */\n    toggle_cell(arg0, arg1) {\n        return _wasm_tutorial_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_toggle_cell\"](this.ptr, arg0, arg1);\n    }\n}\n\nfunction __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\n\n\n//# sourceURL=webpack:///./pkg/wasm_tutorial.js?");

/***/ }),

/***/ "./pkg/wasm_tutorial_bg.wasm":
/*!***********************************!*\
  !*** ./pkg/wasm_tutorial_bg.wasm ***!
  \***********************************/
/*! exports provided: memory, __wbindgen_global_argument_ptr, __wbg_universe_free, universe_new, universe_width, universe_height, universe_cells, universe_render, universe_tick, universe_set_width, universe_set_height, universe_toggle_cell, __wbindgen_free */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./wasm_tutorial */ \"./pkg/wasm_tutorial.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///./pkg/wasm_tutorial_bg.wasm?");

/***/ }),

/***/ "./web/index.js":
/*!**********************!*\
  !*** ./web/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _pkg_wasm_tutorial__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pkg/wasm_tutorial */ \"./pkg/wasm_tutorial.js\");\n/* harmony import */ var _pkg_wasm_tutorial_bg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pkg/wasm_tutorial_bg */ \"./pkg/wasm_tutorial_bg.wasm\");\n\n\n\nconst CELL_SIZE = 5 // px\nconst GRID_COLOR = '#CCCCCC'\nconst DEAD_COLOR = '#FFFFFF'\nconst ALIVE_COLOR = '#000000'\n\nconst universe = _pkg_wasm_tutorial__WEBPACK_IMPORTED_MODULE_0__[\"Universe\"].new()\nconst width = universe.width()\nconst height = universe.height()\n\nconst canvas = document.getElementById('game-canvas')\ncanvas.height = (CELL_SIZE + 1) * height + 1\ncanvas.width = (CELL_SIZE + 1) * width + 1\n\nconst ctx = canvas.getContext('2d')\n\nlet animationId = null\n\nconst renderLoop = () => {\n  universe.tick()\n\n  drawGrid()\n  drawCells()\n\n  animationId = requestAnimationFrame(renderLoop)\n}\n\nconst drawGrid = () => {\n  ctx.beginPath()\n  ctx.strokeStyle = GRID_COLOR\n\n  // Vertical lines.\n  for (let i = 0; i <= width; i++) {\n    ctx.moveTo(i * (CELL_SIZE + 1) + 1, 0)\n    ctx.lineTo(i * (CELL_SIZE + 1) + 1, (CELL_SIZE + 1) * height + 1)\n  }\n\n  // Horizontal lines.\n  for (let j = 0; j <= height; j++) {\n    ctx.moveTo(0, j * (CELL_SIZE + 1) + 1)\n    ctx.lineTo((CELL_SIZE + 1) * width + 1, j * (CELL_SIZE + 1) + 1)\n  }\n\n  ctx.stroke()\n}\n\nconst getIndex = (row, column) => {\n  return row * width + column\n}\n\nconst bitIsSet = (n, arr) => {\n  const byte = Math.floor(n / 8)\n  const mask = 1 << n % 8\n  return (arr[byte] & mask) === mask\n}\n\nconst drawCells = () => {\n  const cellsPtr = universe.cells()\n  const cells = new Uint8Array(_pkg_wasm_tutorial_bg__WEBPACK_IMPORTED_MODULE_1__[\"memory\"].buffer, cellsPtr, (width * height) / 8)\n\n  ctx.beginPath()\n\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const idx = getIndex(row, col)\n\n      ctx.fillStyle = bitIsSet(idx, cells) ? ALIVE_COLOR : DEAD_COLOR\n      ctx.fillRect(col * (CELL_SIZE + 1) + 1, row * (CELL_SIZE + 1) + 1, CELL_SIZE, CELL_SIZE)\n    }\n  }\n\n  ctx.stroke()\n}\n\nconst isPaused = () => {\n  return animationId === null\n}\n\nconst playPauseButton = document.getElementById('play-pause')\n\nconst play = () => {\n  playPauseButton.textContent = '⏸'\n  renderLoop()\n}\n\nconst pause = () => {\n  playPauseButton.textContent = '▶'\n  cancelAnimationFrame(animationId)\n  animationId = null\n}\n\nplayPauseButton.addEventListener('click', event => {\n  if (isPaused()) {\n    play()\n  } else {\n    pause()\n  }\n})\n\nplay()\n\ncanvas.addEventListener('click', event => {\n  const boundingRect = canvas.getBoundingClientRect()\n\n  const scaleX = canvas.width / boundingRect.width\n  const scaleY = canvas.height / boundingRect.height\n\n  const canvasLeft = (event.clientX - boundingRect.left) * scaleX\n  const canvasTop = (event.clientY - boundingRect.top) * scaleY\n\n  const row = Math.min(Math.floor(canvasTop / (CELL_SIZE + 1)), height - 1)\n  const col = Math.min(Math.floor(canvasLeft / (CELL_SIZE + 1)), width - 1)\n\n  universe.toggle_cell(row, col)\n\n  drawGrid()\n  drawCells()\n})\n\n\n//# sourceURL=webpack:///./web/index.js?");

/***/ })

}]);